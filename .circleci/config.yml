version: 2
jobs:
  build:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - run:
          name: Install dependencies and set path
          command: |
            sudo apt-get update
            sudo apt-get install -y ninja-build libcunit1-dev valgrind clang doxygen python3-pip
            # Install meson as root so we can install to the system below.
            sudo pip install meson
            pip install numpy==1.18.5
            pip install --user -r python/requirements/development.txt
            echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
      - run:
          name: Compile C
          command: |
            # Build with coverage options
            meson c/ build-gcc -D b_coverage=true
            ninja -C build-gcc
      - run:
          name: Run C tests
          command: |
            ./build-gcc/tests
            ./build-gcc/cpp_tests
            ./build-gcc/malloc_tests
            ./build-gcc/io_tests
      - run:
          name: Valgrind for C tests.
          command: |
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/tests
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/cpp_tests
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/malloc_tests
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/io_tests
      - run:
          name: Compile C tests under clang
          command: |
            CC=clang CXX=clang++ meson c/ build-clang
            ninja -C build-clang
      - run:
          name: Run clang C tests
          command: |
            ./build-clang/tests
            ./build-clang/cpp_tests
            ./build-clang/malloc_tests
            ./build-clang/io_tests
      - run:
          name: Compile Python
          command: |
            cd python
            CFLAGS="-Wall -Wextra -Werror -Wno-unused-parameter -Wno-cast-function-type" \
              python setup.py build_ext --inplace
      - run:
          name: Run Python tests
          command: |
            cd python
            python3 -m pytest --cov=kastore  --cov-report=xml --cov-branch tests
            python3 -m codecov -F python

      - run:
          name: Build Python package
          command: |
            cd python
            rm -fR build
            python setup.py sdist
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade setuptools pip wheel
            python setup.py build_ext
            python setup.py egg_info
            python setup.py bdist_wheel
            pip wheel dist/*.tar.gz
            pip install dist/*.tar.gz
      - run:
          name: Run Python with C coverage
          command: |
            cd python
            rm -fR build
            CFLAGS="--coverage"  python setup.py build_ext --inplace
            python3 -m pytest tests

      - run:
          name: Run gcov & upload coverage.
          command: |
            gcov -pb -o ./python/build/temp.linux*/ python/_kastoremodule.c
            gcov -pb ./build-gcc/tests@exe/kastore.c.gcno \
              ./build-gcc/malloc_tests@exe/kastore.c.gcno \
              ./build-gcc/io_tests@exe/kastore.c.gcno \
              ./build-gcc/kastore@sha/kastore.c.gcno
            codecov -X gcov -F C

      - run:
          name: Install shared library
          command: |
            meson build-install c --prefix=/usr
            sudo ninja -C build-install install

      - run:
          name: Hand-compile a program.
          command: |
            g++ c/cpp_tests.cpp -o cpp_tests -lkastore
            ./cpp_tests

      - run:
          name: Build docs
          command: |
            cd docs && make
